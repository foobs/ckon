{"name":"ckon","tagline":"automatic compiler & linker for ROOT analyses","body":"*ckon* is a small C++ program/tool which automatically takes care of\r\ncompilation, dictionary generation as well linking of ROOT data analyses. This\r\nincludes building the required libraries and scanning/parsing include headers to\r\nfigure out which libraries the main programs need to be linked to. It uses\r\nautomake/autoconf to be platform independent and GNU install compliant.\r\n\r\n### Get the Code & Install\r\n\r\nThe code is currently not published, yet. I plan to do it soon, though. If you'd like to contribute I'd need to grant you access to my private gitolite-managed repository server. Do the following:\r\n\r\n- generate a ssh-key pair (no password), name the key-pair ```<username>(.pub)```\r\n- send the .pub to @tschaume, put the following in ~/.ssh/config\r\n\r\n        Host=gitolite\r\n        Hostname=cgit.the-huck.com\r\n        User=gitolite\r\n        IdentityFile=~/.ssh/<username>\r\n        IdentitiesOnly=yes\r\n- as soon as I added your key, you should be able to check your accessible repos\r\nvia ```ssh gitolite info```\r\n- clone *ckon* via ```git clone gitolite:ckon```\r\n- to install: ```cd ckon; ./installCkon```  \r\n(see ```./configure --help``` for configure options)\r\n\r\n### Usage\r\n\r\n#### Generic Options\r\n\r\nShown below are the generic command line options which can be given to *ckon*.\r\n\r\n```\r\nGeneric Options:\r\n  -h [ --help ]         show this help\r\n  -v [ --verbose ]      verbose output\r\n  -j arg                call make with option -j <#cores>\r\n  --ckon_cmd arg        setup | clean | install\r\n```\r\n\r\nThe long option ```--ckon_cmd``` is implemented as optional positional option\r\nto run the setup, clean all compilation products (i.e. ```make clean```) and\r\nglobally install libraries and programs (i.e. ```make install```).\r\n\r\n#### Setup\r\n```ckon setup``` generates the files *configure.ac* and *.autom4te.cfg* (both\r\nautoconf specific, no need for modifications) as well as *ckon.cfg*. Modify\r\nthe latter to resemble your directory structure and linker options.\r\n\r\n#### Configuration\r\nThe following options can be set on the command line or preferably in\r\n*ckon.cfg*. Optionally, a file named ```ckonignore``` with a list of strings to\r\nbe ignored during the build process, can be created in the working directory.\r\nWildcards not supported (yet).  \r\n\r\n```\r\nConfiguration:\r\n  -p [ --pythia ] arg    link with pythia library (bool)\r\n  -r [ --roofit ] arg    link with roofit library (bool)\r\n  -s [ --suffix ] arg    Add suffix + in LinkDef file (bool)\r\n  -b [ --boost ] arg     include BOOST_INC and BOOST_LIB (bool)\r\n  --ckon.src_dir arg     source dir\r\n  --ckon.exclSuffix arg   no + suffix in LinkDef pragma\r\n  --ckon.NoRootCint arg   no dictionary\r\n        [don't generate CINT dictionary for subdirs in\r\n        space-separated list ckon.NoRootCint]\r\n  --ckon.prog_subdir arg  progs subdir\r\n        [ckon.prog_subdir contains the programs\r\n        for a specific subdir]\r\n  --ckon.build_dir arg    build dir [$ ckon]\r\n  --ckon.install_dir arg  install dir [$ ckon install]\r\n  --ckon.cppflags arg    add CPPFLAGS to make call\r\n```\r\n\r\n#### Typical Directory Structure\r\n\r\nPut header and source files for each library into a separate folder in\r\n```ckon.src_dir```.  Running *ckon* should automagically take the right action\r\nfor the current status of your build directory. Makefiles and LinkDef’s are\r\ngenerated automatically based on the contents in the ckon.src_dir directory.  A\r\ntypical directory structure could look as follows - using the current defaults\r\nfor illustration purposes:\r\n\r\n```\r\nStRoot\r\n├── CocktailInputPt\r\n│   ├── CocktailInputPt.cxx\r\n│   ├── CocktailInputPt.h\r\n│   ├── dat-files\r\n│   └── programs\r\n│       └── cipt.cc\r\n├── ElectronPid\r\n│   ├── BetaPanels.cxx\r\n│   ├── BetaPanels.h\r\n│   ├── PureSampleAnalysis.cxx\r\n│   ├── PureSampleAnalysis.h\r\n│   ├── SigmaElFitsMaker.cxx\r\n│   ├── SigmaElFitsMaker.h\r\n│   ├── SigmaElFitsPlotter.cxx\r\n│   ├── SigmaElFitsPlotter.h\r\n│   ├── SigmaElFitsUtils.cxx\r\n│   ├── SigmaElFitsUtils.h\r\n│   └── programs\r\n│       ├── README\r\n│       ├── beta3sig.cc\r\n│       ├── dedxCut.cc\r\n│       ├── nsigparamsGP.cc\r\n│       └── pureSamp.cc\r\n├── Gnuplot\r\n│   ├── Gnuplot.cxx\r\n│   └── Gnuplot.h\r\n├── InvMassBgAnalysis\r\n│   ├── InvMassBgAnalysis.cxx\r\n│   ├── InvMassBgAnalysis.h\r\n│   └── programs\r\n│       ├── invmassBg.cc\r\n│       └── runCocktail.cc\r\n├── RunQA\r\n│   ├── Grubbs.cxx\r\n│   ├── Grubbs.h\r\n│   ├── LinFit.cxx\r\n│   ├── LinFit.h\r\n│   ├── RunQaHistos.cxx\r\n│   ├── RunQaHistos.h\r\n│   └── programs\r\n│       └── doRunQA.cc\r\n├── StBadRdosDb\r\n│   ├── StBadRdosDb.cxx\r\n│   ├── StBadRdosDb.h\r\n│   ├── database\r\n│   │   ├── dbfiles\r\n│   │   ├── genAll.sh\r\n│   │   └── genBadRdosDb.pl\r\n│   └── macros\r\n│       └── testStBadRdosDb.C\r\n├── YamlCfgReader\r\n│   ├── YamlCfgReader.cxx\r\n│   ├── YamlCfgReader.h\r\n│   └── config.yml\r\n```\r\n\r\n### Appendix\r\n\r\n#### Reference Talk about Automake/Autoconf Setup\r\n\r\nTalk at Junior's Day of STAR Collaboration Meeting (LBNL, 2011/11/14)  \r\n[link to be added]\r\n\r\n#### Software Requirements\r\n\r\nThe following software and corresponding versions should be installed on your\r\nsystem (might not be complete):\r\n\r\n- m4/1.4.6\r\n- autoconf/2.68\r\n- automake/1.11.4\r\n- libtool/2.4\r\n- boost/1.50\r\n\r\n#### License & Project Homepage\r\n\r\nThis software will be published under the MIT License\r\n(http://opensource.org/licenses/MIT).  \r\nProject page at http://tschaume.github.com/ckon\r\n\r\n#### Authors and Contributors\r\nPatrick Huck (@tschaume)  \r\n*invaluable contributions*: Hiroshi Masui\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}