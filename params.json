{"name":"ckon","tagline":"automatic compiler & linker for ROOT analyses","body":"*ckon* is a C++ program/tool which automatically takes care of compilation,\r\ndictionary generation and linking of programs and libraries developed for data\r\nanalyses within the [CERN ROOT analysis framework](http://root.cern.ch). This\r\nincludes parsing include headers to figure out which libraries the main programs\r\nneed to be linked to. It uses\r\n[automake/autoconf](http://www.gnu.org/software/autoconf/) to be platform\r\nindependent and GNU install compliant. In addition, [m4\r\nmacros](http://www.gnu.org/software/autoconf-archive/The-Macros.html#The-Macros)\r\nare automatically downloaded and the according compiler flags included based on\r\na list of [boost](http://www.boost.org/) libraries provided in the config file.\r\n\r\n##### Authors and Contributors\r\nPatrick Huck (@tschaume)  \r\n*invaluable contributions*: Hiroshi Masui\r\n\r\n### Get the Code & Install\r\n\r\n- clone *ckon* via ```git clone git@github.com:tschaume/ckon.git```\r\n- install via ```cd ckon; ./installCkon <install-path>```  \r\n  (replace ```<install-path>``` with an install path in your $PATH)  \r\n  (see ```./installCkon -h``` for help)\r\n- see ```./configure --help``` for configure options in case something goes\r\n  wrong\r\n\r\n### Usage\r\n\r\n#### Generic Options\r\n\r\nShown below are the generic command line options which can be given to *ckon*.\r\n\r\n```\r\nGeneric Options:\r\n  -h [ --help ]         show this help\r\n  -v [ --verbose ]      verbose output\r\n  -j arg                call make w/ -j <#cores>\r\n  --ckon_cmd arg        setup | clean | install\r\n```\r\n\r\nThe long option ```--ckon_cmd``` is implemented as optional positional option\r\nto run the setup, clean all compilation products (i.e. ```make clean```) and\r\nglobally install libraries and programs (i.e. ```make install```):\r\n\r\n- ```ckon setup```: run the setup\r\n- ```ckon```: compile\r\n- ```ckon clean```: make clean\r\n- ```ckon install```: make install\r\n- ```ckon dry```: only generates Makefiles, no compilation\r\n\r\n#### Setup\r\n```ckon setup``` generates the files *configure.ac* and *.autom4te.cfg* (both\r\nautoconf specific, no need for modifications) as well as *ckon.cfg*. Modify\r\nthe latter to resemble your directory structure and linker options. Simply\r\nremove the lines/options you don't need, thus using the default options.\r\n\r\n#### Configuration\r\nThe following options can be set on the command line or preferably in\r\n*ckon.cfg*. Optionally, a file named ```ckonignore``` with a list of strings to\r\nbe ignored during the build process, can be created in the working directory.\r\nWildcards are not supported (yet). Instead each path currently processed by\r\n*ckon* will be checked against the strings/lines in ```ckonignore```. If one of\r\nthe strings in ```ckonignore``` is contained in the path, the path is\r\nignored/skipped.\r\n\r\n```\r\nConfiguration:\r\n  -s [ --suffix ] arg    add suffix + in LinkDef.h (bool)\r\n  -b [ --boost ] arg     include BOOST_INC/BOOST_LIB (bool)\r\n  --ckon.src_dir arg     source dir\r\n  --ckon.exclSuffix arg  no + suffix\r\n  --ckon.NoRootCint arg  no dictionary\r\n  --ckon.prog_subdir arg progs subdir\r\n  --ckon.build_dir arg   build dir\r\n  --ckon.install_dir arg install dir\r\n  --ckon.cppflags arg    add CPPFLAGS\r\n  --ckon.boost arg       boost libraries\r\n\r\nIn addition, unregistered options of the form\r\nldadd.prog_name are allowed to use for adding\r\nLDFLAGS to the linker of specific programs. The\r\ngiven string/value is added verbatim in LDADD.\r\nUnregistered options are only allowed in ckon.cfg\r\n```\r\n\r\nThe unregistered option group ```ldadd``` is allowed. For instance, link the\r\nprograms *genCharmContrib* and *dedxCut* versus\r\n[Pythia6](http://home.thep.lu.se/~torbjorn/Pythia.html) and\r\n[RooFit](http://root.cern.ch/drupal/content/roofit), respectively, by adding the\r\nfollowing to *ckon.cfg*.\r\n\r\n```\r\n[ldadd]\r\ngenCharmContrib=-lPhysics -lEG -lEGPythia6  # link pythia\r\ndedxCut=-lRooFit -lRooFitCore -lMinuit      # link roofit\r\n```\r\n\r\n`ckon.boost` is set during `ckon setup` to use and link against specific boost\r\nlibraries. Try not to run rootcint (`ckon.NoRootCint`) on the library if\r\ncompilation fails.\r\n\r\nIMPORTANT note for include directives: For the recursive header scan to work,\r\nmake sure that all C++ and ROOT headers are enclosed in ```<...>```! Only your\r\nlocal/private headers should be enclosed in ```\"...\"```. Otherwise *ckon* will\r\nfail reporting a ```basic_string::_S_create``` error.\r\n\r\n#### Typical Directory Structure\r\n\r\nPut header and source files for each library into a separate folder in\r\n```ckon.src_dir```.  Running *ckon* should automagically take the right action\r\nfor the current status of your build directory (no need to run ```ckon clean```\r\nbefore re-compilation). Makefiles and LinkDef’s are generated automatically\r\nbased on the contents and timestamps in the ckon.src_dir directory.\r\n\r\nA typical directory structure could look as follows - using the current\r\ndefaults for illustration purposes:\r\n\r\n```\r\nStRoot\r\n├── ElectronPid\r\n│   ├── BetaPanels.cxx\r\n│   ├── BetaPanels.h\r\n│   ├── PureSampleAnalysis.cxx\r\n│   ├── PureSampleAnalysis.h\r\n│   ├── SigmaElFitsMaker.cxx\r\n│   ├── SigmaElFitsMaker.h\r\n│   ├── SigmaElFitsPlotter.cxx\r\n│   ├── SigmaElFitsPlotter.h\r\n│   ├── SigmaElFitsUtils.cxx\r\n│   ├── SigmaElFitsUtils.h\r\n│   └── programs\r\n│       ├── README\r\n│       ├── beta3sig.cc\r\n│       ├── dedxCut.cc\r\n│       ├── nsigparamsGP.cc\r\n│       └── pureSamp.cc\r\n├── StBadRdosDb\r\n│   ├── StBadRdosDb.cxx\r\n│   ├── StBadRdosDb.h\r\n│   ├── database\r\n│   │   ├── dbfiles\r\n│   │   ├── genAll.sh\r\n│   │   └── genBadRdosDb.pl\r\n│   └── macros\r\n│       └── testStBadRdosDb.C\r\n├── YamlCfgReader\r\n│   ├── YamlCfgReader.cxx\r\n│   ├── YamlCfgReader.h\r\n│   └── config.yml\r\n...\r\n```\r\n\r\n### Reference Talk about Automake/Autoconf Setup\r\n\r\nTalk at Junior's Day of STAR Collaboration Meeting (LBNL, 2011/11/14)  \r\nhttps://speakerdeck.com/tschaume/organize-root-analyses-with-autoconf\r\n\r\n### Software Requirements\r\n\r\nThe following software and corresponding versions should be installed on your\r\nsystem:\r\n\r\n- m4/1.4.6\r\n- autoconf/2.68\r\n- automake/1.11.4\r\n- libtool/2.4\r\n- boost/1.50\r\n- libcurl/7.27.0\r\n\r\n### License & Project Homepage\r\n\r\n*ckon* is published under MIT License (http://opensource.org/licenses/MIT).  \r\nFind the project page at http://tschaume.github.com/ckon\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}